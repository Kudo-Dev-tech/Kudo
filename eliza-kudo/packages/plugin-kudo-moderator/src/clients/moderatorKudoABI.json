{
    "abi": [
        {
            "type": "function",
            "name": "DEFAULT_ADMIN_ROLE",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "bytes32", "internalType": "bytes32" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "EVALUATOR_CONTRACT_ROLE",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "bytes32", "internalType": "bytes32" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "acceptDefaultAdminTransfer",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "addNftType",
            "inputs": [
                {
                    "name": "nftTypeName",
                    "type": "string[]",
                    "internalType": "string[]"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "approve",
            "inputs": [
                { "name": "to", "type": "address", "internalType": "address" },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "balanceOf",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                { "name": "", "type": "uint256", "internalType": "uint256" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "beginDefaultAdminTransfer",
            "inputs": [
                {
                    "name": "newAdmin",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "cancelDefaultAdminTransfer",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "changeDefaultAdminDelay",
            "inputs": [
                {
                    "name": "newDelay",
                    "type": "uint48",
                    "internalType": "uint48"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "defaultAdmin",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "address", "internalType": "address" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "defaultAdminDelay",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "uint48", "internalType": "uint48" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "defaultAdminDelayIncreaseWait",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "uint48", "internalType": "uint48" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getAgentCovenantsData",
            "inputs": [
                {
                    "name": "agent",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct CovenantNFT.CovenantDetails[]",
                    "components": [
                        {
                            "name": "nftId",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "agentName",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "agentId",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "owner",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "settlementData",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "covenantData",
                            "type": "tuple",
                            "internalType": "struct CovenantNFT.CovenantData",
                            "components": [
                                {
                                    "name": "agentWallet",
                                    "type": "address",
                                    "internalType": "address"
                                },
                                {
                                    "name": "status",
                                    "type": "uint8",
                                    "internalType": "enum CovenantNFT.CovenantStatus"
                                },
                                {
                                    "name": "nftType",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goal",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goalDetail",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "subgoalsId",
                                    "type": "uint64[]",
                                    "internalType": "uint64[]"
                                },
                                {
                                    "name": "parentGoalId",
                                    "type": "uint64",
                                    "internalType": "uint64"
                                },
                                {
                                    "name": "price",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "settlementDetail",
                                    "type": "tuple",
                                    "internalType": "struct CovenantNFT.SettlementDetails",
                                    "components": [
                                        {
                                            "name": "settlementAsset",
                                            "type": "address",
                                            "internalType": "address"
                                        },
                                        {
                                            "name": "settlementAmount",
                                            "type": "uint128",
                                            "internalType": "uint128"
                                        }
                                    ]
                                },
                                {
                                    "name": "minAbilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "abilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "shouldWatch",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "isEscrowed",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "data",
                                    "type": "bytes",
                                    "internalType": "bytes"
                                }
                            ]
                        }
                    ]
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getAgentDetails",
            "inputs": [
                {
                    "name": "agent",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [
                { "name": "", "type": "string", "internalType": "string" },
                { "name": "", "type": "uint256[]", "internalType": "uint256[]" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getApproved",
            "inputs": [
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [
                { "name": "", "type": "address", "internalType": "address" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getCovenant",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct CovenantNFT.CovenantData",
                    "components": [
                        {
                            "name": "agentWallet",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "status",
                            "type": "uint8",
                            "internalType": "enum CovenantNFT.CovenantStatus"
                        },
                        {
                            "name": "nftType",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "goal",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "goalDetail",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "subgoalsId",
                            "type": "uint64[]",
                            "internalType": "uint64[]"
                        },
                        {
                            "name": "parentGoalId",
                            "type": "uint64",
                            "internalType": "uint64"
                        },
                        {
                            "name": "price",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "settlementDetail",
                            "type": "tuple",
                            "internalType": "struct CovenantNFT.SettlementDetails",
                            "components": [
                                {
                                    "name": "settlementAsset",
                                    "type": "address",
                                    "internalType": "address"
                                },
                                {
                                    "name": "settlementAmount",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                }
                            ]
                        },
                        {
                            "name": "minAbilityScore",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "abilityScore",
                            "type": "uint128",
                            "internalType": "uint128"
                        },
                        {
                            "name": "shouldWatch",
                            "type": "bool",
                            "internalType": "bool"
                        },
                        {
                            "name": "isEscrowed",
                            "type": "bool",
                            "internalType": "bool"
                        },
                        {
                            "name": "data",
                            "type": "bytes",
                            "internalType": "bytes"
                        }
                    ]
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getCovenantDetails",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct CovenantNFT.CovenantDetails",
                    "components": [
                        {
                            "name": "nftId",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "agentName",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "agentId",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "owner",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "settlementData",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "covenantData",
                            "type": "tuple",
                            "internalType": "struct CovenantNFT.CovenantData",
                            "components": [
                                {
                                    "name": "agentWallet",
                                    "type": "address",
                                    "internalType": "address"
                                },
                                {
                                    "name": "status",
                                    "type": "uint8",
                                    "internalType": "enum CovenantNFT.CovenantStatus"
                                },
                                {
                                    "name": "nftType",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goal",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goalDetail",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "subgoalsId",
                                    "type": "uint64[]",
                                    "internalType": "uint64[]"
                                },
                                {
                                    "name": "parentGoalId",
                                    "type": "uint64",
                                    "internalType": "uint64"
                                },
                                {
                                    "name": "price",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "settlementDetail",
                                    "type": "tuple",
                                    "internalType": "struct CovenantNFT.SettlementDetails",
                                    "components": [
                                        {
                                            "name": "settlementAsset",
                                            "type": "address",
                                            "internalType": "address"
                                        },
                                        {
                                            "name": "settlementAmount",
                                            "type": "uint128",
                                            "internalType": "uint128"
                                        }
                                    ]
                                },
                                {
                                    "name": "minAbilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "abilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "shouldWatch",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "isEscrowed",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "data",
                                    "type": "bytes",
                                    "internalType": "bytes"
                                }
                            ]
                        }
                    ]
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getCovenantsDetails",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct CovenantNFT.CovenantDetails[]",
                    "components": [
                        {
                            "name": "nftId",
                            "type": "uint256",
                            "internalType": "uint256"
                        },
                        {
                            "name": "agentName",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "agentId",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "owner",
                            "type": "address",
                            "internalType": "address"
                        },
                        {
                            "name": "settlementData",
                            "type": "string",
                            "internalType": "string"
                        },
                        {
                            "name": "covenantData",
                            "type": "tuple",
                            "internalType": "struct CovenantNFT.CovenantData",
                            "components": [
                                {
                                    "name": "agentWallet",
                                    "type": "address",
                                    "internalType": "address"
                                },
                                {
                                    "name": "status",
                                    "type": "uint8",
                                    "internalType": "enum CovenantNFT.CovenantStatus"
                                },
                                {
                                    "name": "nftType",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goal",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "goalDetail",
                                    "type": "string",
                                    "internalType": "string"
                                },
                                {
                                    "name": "subgoalsId",
                                    "type": "uint64[]",
                                    "internalType": "uint64[]"
                                },
                                {
                                    "name": "parentGoalId",
                                    "type": "uint64",
                                    "internalType": "uint64"
                                },
                                {
                                    "name": "price",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "settlementDetail",
                                    "type": "tuple",
                                    "internalType": "struct CovenantNFT.SettlementDetails",
                                    "components": [
                                        {
                                            "name": "settlementAsset",
                                            "type": "address",
                                            "internalType": "address"
                                        },
                                        {
                                            "name": "settlementAmount",
                                            "type": "uint128",
                                            "internalType": "uint128"
                                        }
                                    ]
                                },
                                {
                                    "name": "minAbilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "abilityScore",
                                    "type": "uint128",
                                    "internalType": "uint128"
                                },
                                {
                                    "name": "shouldWatch",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "isEscrowed",
                                    "type": "bool",
                                    "internalType": "bool"
                                },
                                {
                                    "name": "data",
                                    "type": "bytes",
                                    "internalType": "bytes"
                                }
                            ]
                        }
                    ]
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getNftTypeName",
            "inputs": [
                { "name": "id", "type": "uint256", "internalType": "uint256" }
            ],
            "outputs": [
                { "name": "", "type": "string", "internalType": "string" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "getRoleAdmin",
            "inputs": [
                { "name": "role", "type": "bytes32", "internalType": "bytes32" }
            ],
            "outputs": [
                { "name": "", "type": "bytes32", "internalType": "bytes32" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "grantRole",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "hasRole",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "isAgentRegistered",
            "inputs": [
                {
                    "name": "agent",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "isApprovedForAll",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "string", "internalType": "string" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "owner",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "address", "internalType": "address" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "ownerOf",
            "inputs": [
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [
                { "name": "", "type": "address", "internalType": "address" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "pendingDefaultAdmin",
            "inputs": [],
            "outputs": [
                {
                    "name": "newAdmin",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "schedule",
                    "type": "uint48",
                    "internalType": "uint48"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "pendingDefaultAdminDelay",
            "inputs": [],
            "outputs": [
                {
                    "name": "newDelay",
                    "type": "uint48",
                    "internalType": "uint48"
                },
                {
                    "name": "schedule",
                    "type": "uint48",
                    "internalType": "uint48"
                }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "purchase",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "goalDetail",
                    "type": "string",
                    "internalType": "string"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "registerAgent",
            "inputs": [
                { "name": "teeId", "type": "string", "internalType": "string" },
                {
                    "name": "agentId",
                    "type": "string",
                    "internalType": "string"
                },
                {
                    "name": "agentName",
                    "type": "string",
                    "internalType": "string"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "registerCovenant",
            "inputs": [
                { "name": "task", "type": "string", "internalType": "string" },
                {
                    "name": "nftType",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "settlementAsset",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "settlementAmount",
                    "type": "uint128",
                    "internalType": "uint128"
                },
                {
                    "name": "minAbilityScore",
                    "type": "uint128",
                    "internalType": "uint128"
                },
                {
                    "name": "price",
                    "type": "uint128",
                    "internalType": "uint128"
                },
                {
                    "name": "shouldWatch",
                    "type": "bool",
                    "internalType": "bool"
                },
                {
                    "name": "isEscrowed",
                    "type": "bool",
                    "internalType": "bool"
                },
                { "name": "data", "type": "bytes", "internalType": "bytes" }
            ],
            "outputs": [
                { "name": "", "type": "bytes32", "internalType": "bytes32" }
            ],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "registerCovenant",
            "inputs": [
                { "name": "task", "type": "string", "internalType": "string" },
                {
                    "name": "nftType",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "parentCovenantId",
                    "type": "uint128",
                    "internalType": "uint128"
                },
                {
                    "name": "settlementAsset",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "settlementAmount",
                    "type": "uint128",
                    "internalType": "uint128"
                },
                {
                    "name": "shouldWatch",
                    "type": "bool",
                    "internalType": "bool"
                },
                {
                    "name": "isEscrowed",
                    "type": "bool",
                    "internalType": "bool"
                },
                { "name": "data", "type": "bytes", "internalType": "bytes" }
            ],
            "outputs": [
                { "name": "", "type": "bytes32", "internalType": "bytes32" }
            ],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "renounceRole",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "revokeRole",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "rollbackDefaultAdminDelay",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "safeTransferFrom",
            "inputs": [
                {
                    "name": "from",
                    "type": "address",
                    "internalType": "address"
                },
                { "name": "to", "type": "address", "internalType": "address" },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "safeTransferFrom",
            "inputs": [
                {
                    "name": "from",
                    "type": "address",
                    "internalType": "address"
                },
                { "name": "to", "type": "address", "internalType": "address" },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                { "name": "data", "type": "bytes", "internalType": "bytes" }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setApprovalForAll",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                },
                { "name": "approved", "type": "bool", "internalType": "bool" }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setCovenantStatus",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "status",
                    "type": "uint8",
                    "internalType": "enum CovenantNFT.CovenantStatus"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "setSettlementData",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                { "name": "data", "type": "string", "internalType": "string" }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "function",
            "name": "supportsInterface",
            "inputs": [
                {
                    "name": "interfaceId",
                    "type": "bytes4",
                    "internalType": "bytes4"
                }
            ],
            "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "symbol",
            "inputs": [],
            "outputs": [
                { "name": "", "type": "string", "internalType": "string" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "tokenURI",
            "inputs": [
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [
                { "name": "", "type": "string", "internalType": "string" }
            ],
            "stateMutability": "view"
        },
        {
            "type": "function",
            "name": "transferFrom",
            "inputs": [
                {
                    "name": "from",
                    "type": "address",
                    "internalType": "address"
                },
                { "name": "to", "type": "address", "internalType": "address" },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable"
        },
        {
            "type": "event",
            "name": "AgentSet",
            "inputs": [
                {
                    "name": "agentWallet",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "agentName",
                    "type": "string",
                    "indexed": false,
                    "internalType": "string"
                },
                {
                    "name": "agentId",
                    "type": "string",
                    "indexed": false,
                    "internalType": "string"
                },
                {
                    "name": "teeId",
                    "type": "string",
                    "indexed": false,
                    "internalType": "string"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "approved",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "indexed": true,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": false,
                    "internalType": "bool"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "CovenantRegistered",
            "inputs": [
                {
                    "name": "requestId",
                    "type": "bytes32",
                    "indexed": false,
                    "internalType": "bytes32"
                },
                {
                    "name": "agentWallet",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "nftId",
                    "type": "uint256",
                    "indexed": true,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "CovenantStatusSet",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "indexed": true,
                    "internalType": "uint256"
                },
                {
                    "name": "status",
                    "type": "uint8",
                    "indexed": false,
                    "internalType": "enum CovenantNFT.CovenantStatus"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "DefaultAdminDelayChangeCanceled",
            "inputs": [],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "DefaultAdminDelayChangeScheduled",
            "inputs": [
                {
                    "name": "newDelay",
                    "type": "uint48",
                    "indexed": false,
                    "internalType": "uint48"
                },
                {
                    "name": "effectSchedule",
                    "type": "uint48",
                    "indexed": false,
                    "internalType": "uint48"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "DefaultAdminTransferCanceled",
            "inputs": [],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "DefaultAdminTransferScheduled",
            "inputs": [
                {
                    "name": "newAdmin",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "acceptSchedule",
                    "type": "uint48",
                    "indexed": false,
                    "internalType": "uint48"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "RoleAdminChanged",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true,
                    "internalType": "bytes32"
                },
                {
                    "name": "previousAdminRole",
                    "type": "bytes32",
                    "indexed": true,
                    "internalType": "bytes32"
                },
                {
                    "name": "newAdminRole",
                    "type": "bytes32",
                    "indexed": true,
                    "internalType": "bytes32"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "RoleGranted",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true,
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "sender",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "RoleRevoked",
            "inputs": [
                {
                    "name": "role",
                    "type": "bytes32",
                    "indexed": true,
                    "internalType": "bytes32"
                },
                {
                    "name": "account",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "sender",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "SettlementDataSet",
            "inputs": [
                {
                    "name": "nftId",
                    "type": "uint256",
                    "indexed": true,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "event",
            "name": "Transfer",
            "inputs": [
                {
                    "name": "from",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": true,
                    "internalType": "address"
                },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "indexed": true,
                    "internalType": "uint256"
                }
            ],
            "anonymous": false
        },
        {
            "type": "error",
            "name": "AccessControlBadConfirmation",
            "inputs": []
        },
        {
            "type": "error",
            "name": "AccessControlEnforcedDefaultAdminDelay",
            "inputs": [
                {
                    "name": "schedule",
                    "type": "uint48",
                    "internalType": "uint48"
                }
            ]
        },
        {
            "type": "error",
            "name": "AccessControlEnforcedDefaultAdminRules",
            "inputs": []
        },
        {
            "type": "error",
            "name": "AccessControlInvalidDefaultAdmin",
            "inputs": [
                {
                    "name": "defaultAdmin",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "AccessControlUnauthorizedAccount",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "neededRole",
                    "type": "bytes32",
                    "internalType": "bytes32"
                }
            ]
        },
        { "type": "error", "name": "AccessForbidden", "inputs": [] },
        { "type": "error", "name": "AgentRegistered", "inputs": [] },
        { "type": "error", "name": "ConditionIsNotMet", "inputs": [] },
        {
            "type": "error",
            "name": "ERC721IncorrectOwner",
            "inputs": [
                {
                    "name": "sender",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                },
                {
                    "name": "owner",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InsufficientApproval",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InvalidApprover",
            "inputs": [
                {
                    "name": "approver",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InvalidOperator",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InvalidOwner",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InvalidReceiver",
            "inputs": [
                {
                    "name": "receiver",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721InvalidSender",
            "inputs": [
                {
                    "name": "sender",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        },
        {
            "type": "error",
            "name": "ERC721NonexistentToken",
            "inputs": [
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ]
        },
        {
            "type": "error",
            "name": "SafeCastOverflowedUintDowncast",
            "inputs": [
                { "name": "bits", "type": "uint8", "internalType": "uint8" },
                {
                    "name": "value",
                    "type": "uint256",
                    "internalType": "uint256"
                }
            ]
        },
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "address"
                }
            ]
        }
    ],
    "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
    "deployedBytecode": {
        "object": "0x",
        "sourceMap": "",
        "linkReferences": {}
    },
    "methodIdentifiers": {
        "DEFAULT_ADMIN_ROLE()": "a217fddf",
        "EVALUATOR_CONTRACT_ROLE()": "18057877",
        "acceptDefaultAdminTransfer()": "cefc1429",
        "addNftType(string[])": "9b4f7443",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "beginDefaultAdminTransfer(address)": "634e93da",
        "cancelDefaultAdminTransfer()": "d602b9fd",
        "changeDefaultAdminDelay(uint48)": "649a5ec7",
        "defaultAdmin()": "84ef8ffc",
        "defaultAdminDelay()": "cc8463c8",
        "defaultAdminDelayIncreaseWait()": "022d63fb",
        "getAgentCovenantsData(address)": "78601fc5",
        "getAgentDetails(address)": "b8c05671",
        "getApproved(uint256)": "081812fc",
        "getCovenant(uint256)": "b1c005fa",
        "getCovenantDetails(uint256)": "a028329c",
        "getCovenantsDetails()": "5ebf5a42",
        "getNftTypeName(uint256)": "6f82d7c2",
        "getRoleAdmin(bytes32)": "248a9ca3",
        "grantRole(bytes32,address)": "2f2ff15d",
        "hasRole(bytes32,address)": "91d14854",
        "isAgentRegistered(address)": "689b6c44",
        "isApprovedForAll(address,address)": "e985e9c5",
        "name()": "06fdde03",
        "owner()": "8da5cb5b",
        "ownerOf(uint256)": "6352211e",
        "pendingDefaultAdmin()": "cf6eefb7",
        "pendingDefaultAdminDelay()": "a1eda53c",
        "purchase(uint256,string)": "da9581b6",
        "registerAgent(string,string,string)": "56a2d660",
        "registerCovenant(string,uint256,address,uint128,uint128,uint128,bool,bool,bytes)": "1c876380",
        "registerCovenant(string,uint256,uint128,address,uint128,bool,bool,bytes)": "ecf75671",
        "renounceRole(bytes32,address)": "36568abe",
        "revokeRole(bytes32,address)": "d547741f",
        "rollbackDefaultAdminDelay()": "0aa6220b",
        "safeTransferFrom(address,address,uint256)": "42842e0e",
        "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
        "setApprovalForAll(address,bool)": "a22cb465",
        "setCovenantStatus(uint256,uint8)": "de518f8d",
        "setSettlementData(uint256,string)": "b3eb7bf2",
        "supportsInterface(bytes4)": "01ffc9a7",
        "symbol()": "95d89b41",
        "tokenURI(uint256)": "c87b56dd",
        "transferFrom(address,address,uint256)": "23b872dd"
    },
    "rawMetadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"name\":\"AccessControlEnforcedDefaultAdminDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlEnforcedDefaultAdminRules\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"AccessControlInvalidDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ConditionIsNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"teeId\",\"type\":\"string\"}],\"name\":\"AgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"CovenantRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"CovenantStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminDelayChangeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"effectSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminDelayChangeScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"acceptSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminTransferScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"SettlementDataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EVALUATOR_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"nftTypeName\",\"type\":\"string[]\"}],\"name\":\"addNftType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"beginDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"}],\"name\":\"changeDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelayIncreaseWait\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getAgentCovenantsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"settlementData\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goalDetail\",\"type\":\"string\"},{\"internalType\":\"uint64[]\",\"name\":\"subgoalsId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"parentGoalId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct CovenantNFT.SettlementDetails\",\"name\":\"settlementDetail\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"minAbilityScore\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"abilityScore\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CovenantNFT.CovenantData\",\"name\":\"covenantData\",\"type\":\"tuple\"}],\"internalType\":\"struct CovenantNFT.CovenantDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getAgentDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getCovenant\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goalDetail\",\"type\":\"string\"},{\"internalType\":\"uint64[]\",\"name\":\"subgoalsId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"parentGoalId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct CovenantNFT.SettlementDetails\",\"name\":\"settlementDetail\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"minAbilityScore\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"abilityScore\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CovenantNFT.CovenantData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getCovenantDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"settlementData\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goalDetail\",\"type\":\"string\"},{\"internalType\":\"uint64[]\",\"name\":\"subgoalsId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"parentGoalId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct CovenantNFT.SettlementDetails\",\"name\":\"settlementDetail\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"minAbilityScore\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"abilityScore\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CovenantNFT.CovenantData\",\"name\":\"covenantData\",\"type\":\"tuple\"}],\"internalType\":\"struct CovenantNFT.CovenantDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCovenantsDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"settlementData\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"},{\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"nftType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goal\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"goalDetail\",\"type\":\"string\"},{\"internalType\":\"uint64[]\",\"name\":\"subgoalsId\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"parentGoalId\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"}],\"internalType\":\"struct CovenantNFT.SettlementDetails\",\"name\":\"settlementDetail\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"minAbilityScore\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"abilityScore\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct CovenantNFT.CovenantData\",\"name\":\"covenantData\",\"type\":\"tuple\"}],\"internalType\":\"struct CovenantNFT.CovenantDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNftTypeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"isAgentRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"goalDetail\",\"type\":\"string\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"teeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"agentName\",\"type\":\"string\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"task\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minAbilityScore\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerCovenant\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"task\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"parentCovenantId\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"settlementAsset\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"settlementAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"shouldWatch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEscrowed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerCovenant\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollbackDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"enum CovenantNFT.CovenantStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setCovenantStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"setSettlementData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlEnforcedDefaultAdminDelay(uint48)\":[{\"details\":\"The delay for transferring the default admin delay is enforced and the operation must wait until `schedule`. NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\"}],\"AccessControlEnforcedDefaultAdminRules()\":[{\"details\":\"At least one of the following rules was violated: - The `DEFAULT_ADMIN_ROLE` must only be managed by itself. - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time. - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\"}],\"AccessControlInvalidDefaultAdmin(address)\":[{\"details\":\"The new default admin is not a valid default admin.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"AgentSet(address,string,string,string)\":{\"params\":{\"agentId\":\"Agent registered identifier\",\"agentName\":\"Agent registered name\",\"agentWallet\":\"Agent registered wallet address\",\"teeId\":\"Agent registered tee identifier\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"CovenantRegistered(bytes32,address,uint256)\":{\"params\":{\"agentWallet\":\"The wallet address of the agent who registered the covenant\",\"nftId\":\"The ID of the newly registered Covenant NFT\",\"requestId\":\"ID for callback identfier\"}},\"CovenantStatusSet(uint256,uint8)\":{\"params\":{\"nftId\":\"The ID of the Covenant NFT\",\"status\":\"The new status of the covenant (IN_PROGRESS, COMPLETED, or FAILED)\"}},\"DefaultAdminDelayChangeCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\"},\"DefaultAdminDelayChangeScheduled(uint48,uint48)\":{\"details\":\"Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next delay to be applied between default admin transfer after `effectSchedule` has passed.\"},\"DefaultAdminTransferCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\"},\"DefaultAdminTransferScheduled(address,uint48)\":{\"details\":\"Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule` passes.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"SettlementDataSet(uint256)\":{\"params\":{\"nftId\":\"The ID of the Covenant NFT\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"acceptDefaultAdminTransfer()\":{\"details\":\"Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\"},\"addNftType(string[])\":{\"params\":{\"nftTypeName\":\"An array of NFT type names to be added\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"beginDefaultAdminTransfer(address)\":{\"details\":\"Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event.\"},\"cancelDefaultAdminTransfer()\":{\"details\":\"Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event.\"},\"changeDefaultAdminDelay(uint48)\":{\"details\":\"Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\"},\"defaultAdmin()\":{\"details\":\"Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\"},\"defaultAdminDelay()\":{\"details\":\"Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}.\"},\"defaultAdminDelayIncreaseWait()\":{\"details\":\"Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\"},\"getAgentCovenantsData(address)\":{\"params\":{\"agent\":\"Agent wallet address\"},\"returns\":{\"_0\":\"CovenantDetails[] Details of agent assigned covenant NFT\"}},\"getAgentDetails(address)\":{\"params\":{\"agent\":\"The address of the agent wallet\"},\"returns\":{\"_0\":\"string The unique identifier of the agent tee id\",\"_1\":\"uint256[] An array of Covenant NFT IDs associated with the agent\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getCovenant(uint256)\":{\"params\":{\"nftId\":\"The ID of the Covenant NFT\"},\"returns\":{\"_0\":\"CovenantData Covenant NFT details\"}},\"getCovenantDetails(uint256)\":{\"params\":{\"nftId\":\"The ID of the target NFT for retrieving covenant details\"},\"returns\":{\"_0\":\"CovenantDetails Details of specific NFT\"}},\"getCovenantsDetails()\":{\"returns\":{\"_0\":\"CovenantDetails[] Details of all covenant NFT\"}},\"getNftTypeName(uint256)\":{\"params\":{\"id\":\"The NFT type ID.\"},\"returns\":{\"_0\":\"The name of the NFT type.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAgentRegistered(address)\":{\"params\":{\"agent\":\"The address of the agent to verify\"},\"returns\":{\"_0\":\"Returns agent register status\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"See {IERC5313-owner}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"pendingDefaultAdmin()\":{\"details\":\"Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\"},\"pendingDefaultAdminDelay()\":{\"details\":\"Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule.\"},\"purchase(uint256,string)\":{\"params\":{\"nftId\":\"The ID of the NFT being purchased\"}},\"registerAgent(string,string,string)\":{\"params\":{\"agentId\":\"Unique identifier for the agent\",\"agentName\":\"Name of the agent\",\"teeId\":\"TEE identifier of the agent\"}},\"registerCovenant(string,uint256,address,uint128,uint128,uint128,bool,bool,bytes)\":{\"params\":{\"data\":\"Additional encoded data related to the covenant\",\"minAbilityScore\":\"The minimum ability score required\",\"price\":\"The price of the Covenant NFT\",\"settlementAmount\":\"The amount required for settlement\",\"settlementAsset\":\"The asset used for settlement\",\"shouldWatch\":\"The covenant status for monitoring\",\"task\":\"The covenant NFT goal\"}},\"registerCovenant(string,uint256,uint128,address,uint128,bool,bool,bytes)\":{\"params\":{\"data\":\"Additional encoded data related to the covenant\",\"parentCovenantId\":\"The ID of the parent covenant\",\"settlementAmount\":\"The amount required for settlement\",\"settlementAsset\":\"The asset used for settlement\",\"shouldWatch\":\"The covenant status for monitoring\",\"task\":\"Description of the covenant goal\"}},\"renounceRole(bytes32,address)\":{\"details\":\"See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role.\"},\"revokeRole(bytes32,address)\":{\"details\":\"See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"rollbackDefaultAdminDelay()\":{\"details\":\"Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setCovenantStatus(uint256,uint8)\":{\"params\":{\"nftId\":\"The ID of the Covenant NFT\",\"status\":\"The new status of the covenant\"}},\"setSettlementData(uint256,string)\":{\"params\":{\"data\":\"Settlement data\",\"nftId\":\"The ID of the Covenant NFT\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The ID of the interface to check\"},\"returns\":{\"_0\":\"Returns whether the interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AccessForbidden()\":[{\"notice\":\"Thrown when the caller is not an authorized agent\"}],\"AgentRegistered()\":[{\"notice\":\"Thrown when an agent is already registered\"}],\"ConditionIsNotMet()\":[{\"notice\":\"Thrown when a required condition is not met\"}]},\"events\":{\"AgentSet(address,string,string,string)\":{\"notice\":\"Emitted when new agent is registered\"},\"CovenantRegistered(bytes32,address,uint256)\":{\"notice\":\"Emitted when a new Covenant NFT is registered\"},\"CovenantStatusSet(uint256,uint8)\":{\"notice\":\"Emitted when the status of a Covenant NFT is updated\"},\"SettlementDataSet(uint256)\":{\"notice\":\"Emitted when settlement data is set for a Covenant NFT\"}},\"kind\":\"user\",\"methods\":{\"addNftType(string[])\":{\"notice\":\"Adds new NFT types\"},\"getAgentCovenantsData(address)\":{\"notice\":\"Retrieves agent assigned covenants details\"},\"getAgentDetails(address)\":{\"notice\":\"Retrieves details of a registered agent\"},\"getCovenant(uint256)\":{\"notice\":\"Retrieves details of a specific Covenant NFT\"},\"getCovenantDetails(uint256)\":{\"notice\":\"Retrieves desired covenants details\"},\"getCovenantsDetails()\":{\"notice\":\"Retrieves all of the covenants details\"},\"getNftTypeName(uint256)\":{\"notice\":\"Retrieves the name of an NFT type based on its ID.\"},\"isAgentRegistered(address)\":{\"notice\":\"Checks if an agent is registered\"},\"purchase(uint256,string)\":{\"notice\":\"Allows user to purchase Covenant NFT\"},\"registerAgent(string,string,string)\":{\"notice\":\"Allows an agent to register themselves\"},\"registerCovenant(string,uint256,address,uint128,uint128,uint128,bool,bool,bytes)\":{\"notice\":\"Registers a new Covenant NFT\"},\"registerCovenant(string,uint256,uint128,address,uint128,bool,bool,bytes)\":{\"notice\":\"Registers as a subgoal for another Covenant NFT\"},\"setCovenantStatus(uint256,uint8)\":{\"notice\":\"Updates the status of Covenant NFT\"},\"setSettlementData(uint256,string)\":{\"notice\":\"Sets settlement data for a specific Covenant NFT\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if the contract supports a specific interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CovenantNFT.sol\":\"CovenantNFT\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink/=lib/chainlink/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80\",\"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z\"]},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd54abb96a6156d9a761f6fdad1d3004bc48d2d4fce47f40a3f91a7ae83fc3a1\",\"dweb:/ipfs/QmUrFSGkTDJ7WaZ6qPVVe3Gn5uN2viPb7x7QQ35UX4DofX\"]},\"lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol\":{\"keccak256\":\"0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ea4d9ae3392dc9db1ef4d7ebef84ce7fa243dc14abb46e68eb2eb60d2cd0e93\",\"dweb:/ipfs/QmRfjyDoLWF74EgmpcGkWZM7Kx1LgHN8dZHBxAnU9vPH46\"]},\"lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"keccak256\":\"0x094d9bafd5008e2e3b53e40b0ca75173cec4e2c81cf2572ddbef07d375976580\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://caa28b73830478c39706023a757ce6cc138c396d94300fbcc927998a139f8b7e\",\"dweb:/ipfs/QmYVS9731qEJhuMMsU6vqrkdGxq2pxdXcvmtGTNSntAsAE\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol\":{\"keccak256\":\"0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b841021f25480424d2359de4869e60e77f790f52e8e85f07aa389543024b559\",\"dweb:/ipfs/QmV7U5ehV5xe3QrbE8ErxfWSSzK1T1dGeizXvYPjWpNDGq\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171\",\"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329\",\"dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c5ae6d85bd48cca8d6d2fcec8c63efd86f56f8a5832577a47e403ce0e65cb09\",\"dweb:/ipfs/QmUtcS8AbRSWhuc61puYet58os8FvSqm329ChoW8wwZXZk\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11\",\"dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34\",\"dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02\",\"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://746d295e403931aeb9d6065fd5a0871f43ab5459814a60623611e4b6641a09fd\",\"dweb:/ipfs/QmWrgT8YJrQ9FfD1o3YYArwo57e7MGdpFKuM74qJ4qE34E\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251\",\"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d\",\"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol\":{\"keccak256\":\"0xafb7be6c8945a04bdd080fd6a3a3d0fa0329f1ad0d3bcd431dc1dcf2462d3da9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e5a595aaee5f9fcfa163293afd9518d069fa424bffbf65d53d961d0394ed1dc5\",\"dweb:/ipfs/Qmb8U9Z38K1nmKwP895JoUo8pupwexUnjzcgAC6STzpQo4\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f\",\"dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz\"]},\"src/CovenantNFT.sol\":{\"keccak256\":\"0xeec4446907ee616a38fe6e4635509397456fa0a4b97eff6a6afb25be40124239\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://556bbf98f4720749743b3bc477d7b03ff2ca9c25fbe8dbb61a85fc910647bbe3\",\"dweb:/ipfs/QmTyp8czRKfW5qXpTMPigZ2yS65hzPo7YnLbDBsjiwVmWt\"]}},\"version\":1}",
    "metadata": {
        "compiler": { "version": "0.8.27+commit.40a35a09" },
        "language": "Solidity",
        "output": {
            "abi": [
                {
                    "inputs": [],
                    "type": "error",
                    "name": "AccessControlBadConfirmation"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint48",
                            "name": "schedule",
                            "type": "uint48"
                        }
                    ],
                    "type": "error",
                    "name": "AccessControlEnforcedDefaultAdminDelay"
                },
                {
                    "inputs": [],
                    "type": "error",
                    "name": "AccessControlEnforcedDefaultAdminRules"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "defaultAdmin",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "AccessControlInvalidDefaultAdmin"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "neededRole",
                            "type": "bytes32"
                        }
                    ],
                    "type": "error",
                    "name": "AccessControlUnauthorizedAccount"
                },
                { "inputs": [], "type": "error", "name": "AccessForbidden" },
                { "inputs": [], "type": "error", "name": "AgentRegistered" },
                { "inputs": [], "type": "error", "name": "ConditionIsNotMet" },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "sender",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721IncorrectOwner"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InsufficientApproval"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "approver",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InvalidApprover"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InvalidOperator"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InvalidOwner"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "receiver",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InvalidReceiver"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "sender",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721InvalidSender"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "type": "error",
                    "name": "ERC721NonexistentToken"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint8",
                            "name": "bits",
                            "type": "uint8"
                        },
                        {
                            "internalType": "uint256",
                            "name": "value",
                            "type": "uint256"
                        }
                    ],
                    "type": "error",
                    "name": "SafeCastOverflowedUintDowncast"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "token",
                            "type": "address"
                        }
                    ],
                    "type": "error",
                    "name": "SafeERC20FailedOperation"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "agentWallet",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "string",
                            "name": "agentName",
                            "type": "string",
                            "indexed": false
                        },
                        {
                            "internalType": "string",
                            "name": "agentId",
                            "type": "string",
                            "indexed": false
                        },
                        {
                            "internalType": "string",
                            "name": "teeId",
                            "type": "string",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "AgentSet",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "approved",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "Approval",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "bool",
                            "name": "approved",
                            "type": "bool",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "ApprovalForAll",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "requestId",
                            "type": "bytes32",
                            "indexed": false
                        },
                        {
                            "internalType": "address",
                            "name": "agentWallet",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "CovenantRegistered",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256",
                            "indexed": true
                        },
                        {
                            "internalType": "enum CovenantNFT.CovenantStatus",
                            "name": "status",
                            "type": "uint8",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "CovenantStatusSet",
                    "anonymous": false
                },
                {
                    "inputs": [],
                    "type": "event",
                    "name": "DefaultAdminDelayChangeCanceled",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint48",
                            "name": "newDelay",
                            "type": "uint48",
                            "indexed": false
                        },
                        {
                            "internalType": "uint48",
                            "name": "effectSchedule",
                            "type": "uint48",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "DefaultAdminDelayChangeScheduled",
                    "anonymous": false
                },
                {
                    "inputs": [],
                    "type": "event",
                    "name": "DefaultAdminTransferCanceled",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "newAdmin",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint48",
                            "name": "acceptSchedule",
                            "type": "uint48",
                            "indexed": false
                        }
                    ],
                    "type": "event",
                    "name": "DefaultAdminTransferScheduled",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32",
                            "indexed": true
                        },
                        {
                            "internalType": "bytes32",
                            "name": "previousAdminRole",
                            "type": "bytes32",
                            "indexed": true
                        },
                        {
                            "internalType": "bytes32",
                            "name": "newAdminRole",
                            "type": "bytes32",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "RoleAdminChanged",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "sender",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "RoleGranted",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "sender",
                            "type": "address",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "RoleRevoked",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "SettlementDataSet",
                    "anonymous": false
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "from",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "address",
                            "name": "to",
                            "type": "address",
                            "indexed": true
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256",
                            "indexed": true
                        }
                    ],
                    "type": "event",
                    "name": "Transfer",
                    "anonymous": false
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "DEFAULT_ADMIN_ROLE",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "EVALUATOR_CONTRACT_ROLE",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "acceptDefaultAdminTransfer"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string[]",
                            "name": "nftTypeName",
                            "type": "string[]"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "addNftType"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "to",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "approve"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "balanceOf",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "",
                            "type": "uint256"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "newAdmin",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "beginDefaultAdminTransfer"
                },
                {
                    "inputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "cancelDefaultAdminTransfer"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint48",
                            "name": "newDelay",
                            "type": "uint48"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "changeDefaultAdminDelay"
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "defaultAdmin",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "defaultAdminDelay",
                    "outputs": [
                        {
                            "internalType": "uint48",
                            "name": "",
                            "type": "uint48"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "defaultAdminDelayIncreaseWait",
                    "outputs": [
                        {
                            "internalType": "uint48",
                            "name": "",
                            "type": "uint48"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "agent",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getAgentCovenantsData",
                    "outputs": [
                        {
                            "internalType": "struct CovenantNFT.CovenantDetails[]",
                            "name": "",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "nftId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentId",
                                    "type": "string"
                                },
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "string",
                                    "name": "settlementData",
                                    "type": "string"
                                },
                                {
                                    "internalType": "struct CovenantNFT.CovenantData",
                                    "name": "covenantData",
                                    "type": "tuple",
                                    "components": [
                                        {
                                            "internalType": "address",
                                            "name": "agentWallet",
                                            "type": "address"
                                        },
                                        {
                                            "internalType": "enum CovenantNFT.CovenantStatus",
                                            "name": "status",
                                            "type": "uint8"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "nftType",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goal",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goalDetail",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "uint64[]",
                                            "name": "subgoalsId",
                                            "type": "uint64[]"
                                        },
                                        {
                                            "internalType": "uint64",
                                            "name": "parentGoalId",
                                            "type": "uint64"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "price",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "struct CovenantNFT.SettlementDetails",
                                            "name": "settlementDetail",
                                            "type": "tuple",
                                            "components": [
                                                {
                                                    "internalType": "address",
                                                    "name": "settlementAsset",
                                                    "type": "address"
                                                },
                                                {
                                                    "internalType": "uint128",
                                                    "name": "settlementAmount",
                                                    "type": "uint128"
                                                }
                                            ]
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "minAbilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "abilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "shouldWatch",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "isEscrowed",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bytes",
                                            "name": "data",
                                            "type": "bytes"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "agent",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getAgentDetails",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256[]",
                            "name": "",
                            "type": "uint256[]"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getApproved",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getCovenant",
                    "outputs": [
                        {
                            "internalType": "struct CovenantNFT.CovenantData",
                            "name": "",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "address",
                                    "name": "agentWallet",
                                    "type": "address"
                                },
                                {
                                    "internalType": "enum CovenantNFT.CovenantStatus",
                                    "name": "status",
                                    "type": "uint8"
                                },
                                {
                                    "internalType": "string",
                                    "name": "nftType",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "goal",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "goalDetail",
                                    "type": "string"
                                },
                                {
                                    "internalType": "uint64[]",
                                    "name": "subgoalsId",
                                    "type": "uint64[]"
                                },
                                {
                                    "internalType": "uint64",
                                    "name": "parentGoalId",
                                    "type": "uint64"
                                },
                                {
                                    "internalType": "uint128",
                                    "name": "price",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "struct CovenantNFT.SettlementDetails",
                                    "name": "settlementDetail",
                                    "type": "tuple",
                                    "components": [
                                        {
                                            "internalType": "address",
                                            "name": "settlementAsset",
                                            "type": "address"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "settlementAmount",
                                            "type": "uint128"
                                        }
                                    ]
                                },
                                {
                                    "internalType": "uint128",
                                    "name": "minAbilityScore",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint128",
                                    "name": "abilityScore",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "shouldWatch",
                                    "type": "bool"
                                },
                                {
                                    "internalType": "bool",
                                    "name": "isEscrowed",
                                    "type": "bool"
                                },
                                {
                                    "internalType": "bytes",
                                    "name": "data",
                                    "type": "bytes"
                                }
                            ]
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getCovenantDetails",
                    "outputs": [
                        {
                            "internalType": "struct CovenantNFT.CovenantDetails",
                            "name": "",
                            "type": "tuple",
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "nftId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentId",
                                    "type": "string"
                                },
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "string",
                                    "name": "settlementData",
                                    "type": "string"
                                },
                                {
                                    "internalType": "struct CovenantNFT.CovenantData",
                                    "name": "covenantData",
                                    "type": "tuple",
                                    "components": [
                                        {
                                            "internalType": "address",
                                            "name": "agentWallet",
                                            "type": "address"
                                        },
                                        {
                                            "internalType": "enum CovenantNFT.CovenantStatus",
                                            "name": "status",
                                            "type": "uint8"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "nftType",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goal",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goalDetail",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "uint64[]",
                                            "name": "subgoalsId",
                                            "type": "uint64[]"
                                        },
                                        {
                                            "internalType": "uint64",
                                            "name": "parentGoalId",
                                            "type": "uint64"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "price",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "struct CovenantNFT.SettlementDetails",
                                            "name": "settlementDetail",
                                            "type": "tuple",
                                            "components": [
                                                {
                                                    "internalType": "address",
                                                    "name": "settlementAsset",
                                                    "type": "address"
                                                },
                                                {
                                                    "internalType": "uint128",
                                                    "name": "settlementAmount",
                                                    "type": "uint128"
                                                }
                                            ]
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "minAbilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "abilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "shouldWatch",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "isEscrowed",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bytes",
                                            "name": "data",
                                            "type": "bytes"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getCovenantsDetails",
                    "outputs": [
                        {
                            "internalType": "struct CovenantNFT.CovenantDetails[]",
                            "name": "",
                            "type": "tuple[]",
                            "components": [
                                {
                                    "internalType": "uint256",
                                    "name": "nftId",
                                    "type": "uint256"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentName",
                                    "type": "string"
                                },
                                {
                                    "internalType": "string",
                                    "name": "agentId",
                                    "type": "string"
                                },
                                {
                                    "internalType": "address",
                                    "name": "owner",
                                    "type": "address"
                                },
                                {
                                    "internalType": "string",
                                    "name": "settlementData",
                                    "type": "string"
                                },
                                {
                                    "internalType": "struct CovenantNFT.CovenantData",
                                    "name": "covenantData",
                                    "type": "tuple",
                                    "components": [
                                        {
                                            "internalType": "address",
                                            "name": "agentWallet",
                                            "type": "address"
                                        },
                                        {
                                            "internalType": "enum CovenantNFT.CovenantStatus",
                                            "name": "status",
                                            "type": "uint8"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "nftType",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goal",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "string",
                                            "name": "goalDetail",
                                            "type": "string"
                                        },
                                        {
                                            "internalType": "uint64[]",
                                            "name": "subgoalsId",
                                            "type": "uint64[]"
                                        },
                                        {
                                            "internalType": "uint64",
                                            "name": "parentGoalId",
                                            "type": "uint64"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "price",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "struct CovenantNFT.SettlementDetails",
                                            "name": "settlementDetail",
                                            "type": "tuple",
                                            "components": [
                                                {
                                                    "internalType": "address",
                                                    "name": "settlementAsset",
                                                    "type": "address"
                                                },
                                                {
                                                    "internalType": "uint128",
                                                    "name": "settlementAmount",
                                                    "type": "uint128"
                                                }
                                            ]
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "minAbilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "uint128",
                                            "name": "abilityScore",
                                            "type": "uint128"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "shouldWatch",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bool",
                                            "name": "isEscrowed",
                                            "type": "bool"
                                        },
                                        {
                                            "internalType": "bytes",
                                            "name": "data",
                                            "type": "bytes"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "id",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getNftTypeName",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "getRoleAdmin",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "grantRole"
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "hasRole",
                    "outputs": [
                        { "internalType": "bool", "name": "", "type": "bool" }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "agent",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "isAgentRegistered",
                    "outputs": [
                        { "internalType": "bool", "name": "", "type": "bool" }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "owner",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "isApprovedForAll",
                    "outputs": [
                        { "internalType": "bool", "name": "", "type": "bool" }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "name",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "owner",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "ownerOf",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "pendingDefaultAdmin",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "newAdmin",
                            "type": "address"
                        },
                        {
                            "internalType": "uint48",
                            "name": "schedule",
                            "type": "uint48"
                        }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "pendingDefaultAdminDelay",
                    "outputs": [
                        {
                            "internalType": "uint48",
                            "name": "newDelay",
                            "type": "uint48"
                        },
                        {
                            "internalType": "uint48",
                            "name": "schedule",
                            "type": "uint48"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "goalDetail",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "purchase"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "teeId",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "agentId",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "agentName",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "registerAgent"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "task",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "nftType",
                            "type": "uint256"
                        },
                        {
                            "internalType": "address",
                            "name": "settlementAsset",
                            "type": "address"
                        },
                        {
                            "internalType": "uint128",
                            "name": "settlementAmount",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint128",
                            "name": "minAbilityScore",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint128",
                            "name": "price",
                            "type": "uint128"
                        },
                        {
                            "internalType": "bool",
                            "name": "shouldWatch",
                            "type": "bool"
                        },
                        {
                            "internalType": "bool",
                            "name": "isEscrowed",
                            "type": "bool"
                        },
                        {
                            "internalType": "bytes",
                            "name": "data",
                            "type": "bytes"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "registerCovenant",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "task",
                            "type": "string"
                        },
                        {
                            "internalType": "uint256",
                            "name": "nftType",
                            "type": "uint256"
                        },
                        {
                            "internalType": "uint128",
                            "name": "parentCovenantId",
                            "type": "uint128"
                        },
                        {
                            "internalType": "address",
                            "name": "settlementAsset",
                            "type": "address"
                        },
                        {
                            "internalType": "uint128",
                            "name": "settlementAmount",
                            "type": "uint128"
                        },
                        {
                            "internalType": "bool",
                            "name": "shouldWatch",
                            "type": "bool"
                        },
                        {
                            "internalType": "bool",
                            "name": "isEscrowed",
                            "type": "bool"
                        },
                        {
                            "internalType": "bytes",
                            "name": "data",
                            "type": "bytes"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "registerCovenant",
                    "outputs": [
                        {
                            "internalType": "bytes32",
                            "name": "",
                            "type": "bytes32"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "renounceRole"
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes32",
                            "name": "role",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "address",
                            "name": "account",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "revokeRole"
                },
                {
                    "inputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "rollbackDefaultAdminDelay"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "from",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "to",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "safeTransferFrom"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "from",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "to",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "bytes",
                            "name": "data",
                            "type": "bytes"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "safeTransferFrom"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "operator",
                            "type": "address"
                        },
                        {
                            "internalType": "bool",
                            "name": "approved",
                            "type": "bool"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setApprovalForAll"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "enum CovenantNFT.CovenantStatus",
                            "name": "status",
                            "type": "uint8"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setCovenantStatus"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "nftId",
                            "type": "uint256"
                        },
                        {
                            "internalType": "string",
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "setSettlementData"
                },
                {
                    "inputs": [
                        {
                            "internalType": "bytes4",
                            "name": "interfaceId",
                            "type": "bytes4"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "supportsInterface",
                    "outputs": [
                        { "internalType": "bool", "name": "", "type": "bool" }
                    ]
                },
                {
                    "inputs": [],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "symbol",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function",
                    "name": "tokenURI",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ]
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "from",
                            "type": "address"
                        },
                        {
                            "internalType": "address",
                            "name": "to",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "tokenId",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "nonpayable",
                    "type": "function",
                    "name": "transferFrom"
                }
            ],
            "devdoc": {
                "kind": "dev",
                "methods": {
                    "acceptDefaultAdminTransfer()": {
                        "details": "Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed."
                    },
                    "addNftType(string[])": {
                        "params": {
                            "nftTypeName": "An array of NFT type names to be added"
                        }
                    },
                    "approve(address,uint256)": {
                        "details": "See {IERC721-approve}."
                    },
                    "balanceOf(address)": {
                        "details": "See {IERC721-balanceOf}."
                    },
                    "beginDefaultAdminTransfer(address)": {
                        "details": "Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event."
                    },
                    "cancelDefaultAdminTransfer()": {
                        "details": "Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event."
                    },
                    "changeDefaultAdminDelay(uint48)": {
                        "details": "Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event."
                    },
                    "defaultAdmin()": {
                        "details": "Returns the address of the current `DEFAULT_ADMIN_ROLE` holder."
                    },
                    "defaultAdminDelay()": {
                        "details": "Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}."
                    },
                    "defaultAdminDelayIncreaseWait()": {
                        "details": "Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds)."
                    },
                    "getAgentCovenantsData(address)": {
                        "params": { "agent": "Agent wallet address" },
                        "returns": {
                            "_0": "CovenantDetails[] Details of agent assigned covenant NFT"
                        }
                    },
                    "getAgentDetails(address)": {
                        "params": {
                            "agent": "The address of the agent wallet"
                        },
                        "returns": {
                            "_0": "string The unique identifier of the agent tee id",
                            "_1": "uint256[] An array of Covenant NFT IDs associated with the agent"
                        }
                    },
                    "getApproved(uint256)": {
                        "details": "See {IERC721-getApproved}."
                    },
                    "getCovenant(uint256)": {
                        "params": { "nftId": "The ID of the Covenant NFT" },
                        "returns": { "_0": "CovenantData Covenant NFT details" }
                    },
                    "getCovenantDetails(uint256)": {
                        "params": {
                            "nftId": "The ID of the target NFT for retrieving covenant details"
                        },
                        "returns": {
                            "_0": "CovenantDetails Details of specific NFT"
                        }
                    },
                    "getCovenantsDetails()": {
                        "returns": {
                            "_0": "CovenantDetails[] Details of all covenant NFT"
                        }
                    },
                    "getNftTypeName(uint256)": {
                        "params": { "id": "The NFT type ID." },
                        "returns": { "_0": "The name of the NFT type." }
                    },
                    "getRoleAdmin(bytes32)": {
                        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
                    },
                    "grantRole(bytes32,address)": {
                        "details": "See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
                    },
                    "hasRole(bytes32,address)": {
                        "details": "Returns `true` if `account` has been granted `role`."
                    },
                    "isAgentRegistered(address)": {
                        "params": {
                            "agent": "The address of the agent to verify"
                        },
                        "returns": { "_0": "Returns agent register status" }
                    },
                    "isApprovedForAll(address,address)": {
                        "details": "See {IERC721-isApprovedForAll}."
                    },
                    "name()": { "details": "See {IERC721Metadata-name}." },
                    "owner()": { "details": "See {IERC5313-owner}." },
                    "ownerOf(uint256)": { "details": "See {IERC721-ownerOf}." },
                    "pendingDefaultAdmin()": {
                        "details": "Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced."
                    },
                    "pendingDefaultAdminDelay()": {
                        "details": "Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule."
                    },
                    "purchase(uint256,string)": {
                        "params": {
                            "nftId": "The ID of the NFT being purchased"
                        }
                    },
                    "registerAgent(string,string,string)": {
                        "params": {
                            "agentId": "Unique identifier for the agent",
                            "agentName": "Name of the agent",
                            "teeId": "TEE identifier of the agent"
                        }
                    },
                    "registerCovenant(string,uint256,address,uint128,uint128,uint128,bool,bool,bytes)": {
                        "params": {
                            "data": "Additional encoded data related to the covenant",
                            "minAbilityScore": "The minimum ability score required",
                            "price": "The price of the Covenant NFT",
                            "settlementAmount": "The amount required for settlement",
                            "settlementAsset": "The asset used for settlement",
                            "shouldWatch": "The covenant status for monitoring",
                            "task": "The covenant NFT goal"
                        }
                    },
                    "registerCovenant(string,uint256,uint128,address,uint128,bool,bool,bytes)": {
                        "params": {
                            "data": "Additional encoded data related to the covenant",
                            "parentCovenantId": "The ID of the parent covenant",
                            "settlementAmount": "The amount required for settlement",
                            "settlementAsset": "The asset used for settlement",
                            "shouldWatch": "The covenant status for monitoring",
                            "task": "Description of the covenant goal"
                        }
                    },
                    "renounceRole(bytes32,address)": {
                        "details": "See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role."
                    },
                    "revokeRole(bytes32,address)": {
                        "details": "See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
                    },
                    "rollbackDefaultAdminDelay()": {
                        "details": "Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event."
                    },
                    "safeTransferFrom(address,address,uint256)": {
                        "details": "See {IERC721-safeTransferFrom}."
                    },
                    "safeTransferFrom(address,address,uint256,bytes)": {
                        "details": "See {IERC721-safeTransferFrom}."
                    },
                    "setApprovalForAll(address,bool)": {
                        "details": "See {IERC721-setApprovalForAll}."
                    },
                    "setCovenantStatus(uint256,uint8)": {
                        "params": {
                            "nftId": "The ID of the Covenant NFT",
                            "status": "The new status of the covenant"
                        }
                    },
                    "setSettlementData(uint256,string)": {
                        "params": {
                            "data": "Settlement data",
                            "nftId": "The ID of the Covenant NFT"
                        }
                    },
                    "supportsInterface(bytes4)": {
                        "params": {
                            "interfaceId": "The ID of the interface to check"
                        },
                        "returns": {
                            "_0": "Returns whether the interface is supported"
                        }
                    },
                    "symbol()": { "details": "See {IERC721Metadata-symbol}." },
                    "tokenURI(uint256)": {
                        "details": "See {IERC721Metadata-tokenURI}."
                    },
                    "transferFrom(address,address,uint256)": {
                        "details": "See {IERC721-transferFrom}."
                    }
                },
                "version": 1
            },
            "userdoc": {
                "kind": "user",
                "methods": {
                    "addNftType(string[])": { "notice": "Adds new NFT types" },
                    "getAgentCovenantsData(address)": {
                        "notice": "Retrieves agent assigned covenants details"
                    },
                    "getAgentDetails(address)": {
                        "notice": "Retrieves details of a registered agent"
                    },
                    "getCovenant(uint256)": {
                        "notice": "Retrieves details of a specific Covenant NFT"
                    },
                    "getCovenantDetails(uint256)": {
                        "notice": "Retrieves desired covenants details"
                    },
                    "getCovenantsDetails()": {
                        "notice": "Retrieves all of the covenants details"
                    },
                    "getNftTypeName(uint256)": {
                        "notice": "Retrieves the name of an NFT type based on its ID."
                    },
                    "isAgentRegistered(address)": {
                        "notice": "Checks if an agent is registered"
                    },
                    "purchase(uint256,string)": {
                        "notice": "Allows user to purchase Covenant NFT"
                    },
                    "registerAgent(string,string,string)": {
                        "notice": "Allows an agent to register themselves"
                    },
                    "registerCovenant(string,uint256,address,uint128,uint128,uint128,bool,bool,bytes)": {
                        "notice": "Registers a new Covenant NFT"
                    },
                    "registerCovenant(string,uint256,uint128,address,uint128,bool,bool,bytes)": {
                        "notice": "Registers as a subgoal for another Covenant NFT"
                    },
                    "setCovenantStatus(uint256,uint8)": {
                        "notice": "Updates the status of Covenant NFT"
                    },
                    "setSettlementData(uint256,string)": {
                        "notice": "Sets settlement data for a specific Covenant NFT"
                    },
                    "supportsInterface(bytes4)": {
                        "notice": "Checks if the contract supports a specific interface"
                    }
                },
                "version": 1
            }
        },
        "settings": {
            "remappings": [
                "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
                "chainlink/=lib/chainlink/",
                "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
                "forge-std/=lib/forge-std/src/",
                "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
                "openzeppelin-contracts/=lib/openzeppelin-contracts/"
            ],
            "optimizer": { "enabled": true, "runs": 200 },
            "metadata": { "bytecodeHash": "ipfs" },
            "compilationTarget": { "src/CovenantNFT.sol": "CovenantNFT" },
            "evmVersion": "cancun",
            "libraries": {}
        },
        "sources": {
            "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
                "keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
                "urls": [
                    "bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
                    "dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
                "keccak256": "0xc1c2a7f1563b77050dc6d507db9f4ada5d042c1f6a9ddbffdc49c77cdc0a1606",
                "urls": [
                    "bzz-raw://fd54abb96a6156d9a761f6fdad1d3004bc48d2d4fce47f40a3f91a7ae83fc3a1",
                    "dweb:/ipfs/QmUrFSGkTDJ7WaZ6qPVVe3Gn5uN2viPb7x7QQ35UX4DofX"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/access/extensions/AccessControlDefaultAdminRules.sol": {
                "keccak256": "0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b",
                "urls": [
                    "bzz-raw://9ea4d9ae3392dc9db1ef4d7ebef84ce7fa243dc14abb46e68eb2eb60d2cd0e93",
                    "dweb:/ipfs/QmRfjyDoLWF74EgmpcGkWZM7Kx1LgHN8dZHBxAnU9vPH46"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol": {
                "keccak256": "0x094d9bafd5008e2e3b53e40b0ca75173cec4e2c81cf2572ddbef07d375976580",
                "urls": [
                    "bzz-raw://caa28b73830478c39706023a757ce6cc138c396d94300fbcc927998a139f8b7e",
                    "dweb:/ipfs/QmYVS9731qEJhuMMsU6vqrkdGxq2pxdXcvmtGTNSntAsAE"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
                "keccak256": "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
                "urls": [
                    "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
                    "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
                "keccak256": "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
                "urls": [
                    "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
                    "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
                "keccak256": "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
                "urls": [
                    "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
                    "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/interfaces/IERC5313.sol": {
                "keccak256": "0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621",
                "urls": [
                    "bzz-raw://0b841021f25480424d2359de4869e60e77f790f52e8e85f07aa389543024b559",
                    "dweb:/ipfs/QmV7U5ehV5xe3QrbE8ErxfWSSzK1T1dGeizXvYPjWpNDGq"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
                "keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
                "urls": [
                    "bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
                    "dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
                "keccak256": "0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368",
                "urls": [
                    "bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171",
                    "dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
                "keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
                "urls": [
                    "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
                    "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
                "keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
                "urls": [
                    "bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
                    "dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
                "keccak256": "0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf",
                "urls": [
                    "bzz-raw://fabe6bef5167ae741dd8c22d7f81d3f9120bd61b290762a2e8f176712567d329",
                    "dweb:/ipfs/QmSnEitJ6xmf1SSAUeZozD7Gx7h8bNnX3a1ZBzqeivsvVg"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
                "keccak256": "0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a",
                "urls": [
                    "bzz-raw://2c5ae6d85bd48cca8d6d2fcec8c63efd86f56f8a5832577a47e403ce0e65cb09",
                    "dweb:/ipfs/QmUtcS8AbRSWhuc61puYet58os8FvSqm329ChoW8wwZXZk"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
                "keccak256": "0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261",
                "urls": [
                    "bzz-raw://6b7f97c5960a50fd1822cb298551ffc908e37b7893a68d6d08bce18a11cb0f11",
                    "dweb:/ipfs/QmQQvxBytoY1eBt3pRQDmvH2hZ2yjhs12YqVfzGm7KSURq"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
                "keccak256": "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
                "urls": [
                    "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
                    "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
                "keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
                "urls": [
                    "bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
                    "dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/token/ERC721/utils/ERC721Utils.sol": {
                "keccak256": "0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855",
                "urls": [
                    "bzz-raw://746d295e403931aeb9d6065fd5a0871f43ab5459814a60623611e4b6641a09fd",
                    "dweb:/ipfs/QmWrgT8YJrQ9FfD1o3YYArwo57e7MGdpFKuM74qJ4qE34E"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
                "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
                "urls": [
                    "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
                    "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
                "keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
                "urls": [
                    "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
                    "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
                "keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
                "urls": [
                    "bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
                    "dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
                "keccak256": "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
                "urls": [
                    "bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
                    "dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
                "keccak256": "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
                "urls": [
                    "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
                    "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
                "keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
                "urls": [
                    "bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
                    "dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
                "keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
                "urls": [
                    "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
                    "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
                "keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
                "urls": [
                    "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
                    "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableMap.sol": {
                "keccak256": "0xafb7be6c8945a04bdd080fd6a3a3d0fa0329f1ad0d3bcd431dc1dcf2462d3da9",
                "urls": [
                    "bzz-raw://e5a595aaee5f9fcfa163293afd9518d069fa424bffbf65d53d961d0394ed1dc5",
                    "dweb:/ipfs/Qmb8U9Z38K1nmKwP895JoUo8pupwexUnjzcgAC6STzpQo4"
                ],
                "license": "MIT"
            },
            "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
                "keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
                "urls": [
                    "bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
                    "dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
                ],
                "license": "MIT"
            },
            "src/CovenantNFT.sol": {
                "keccak256": "0xeec4446907ee616a38fe6e4635509397456fa0a4b97eff6a6afb25be40124239",
                "urls": [
                    "bzz-raw://556bbf98f4720749743b3bc477d7b03ff2ca9c25fbe8dbb61a85fc910647bbe3",
                    "dweb:/ipfs/QmTyp8czRKfW5qXpTMPigZ2yS65hzPo7YnLbDBsjiwVmWt"
                ],
                "license": "UNLICENSED"
            }
        },
        "version": 1
    },
    "id": 65
}
